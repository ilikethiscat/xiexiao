<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[谢小漫]]></title>
  <link href="http://xiexiao.com/atom.xml" rel="self"/>
  <link href="http://xiexiao.com"/>
  <updated>2014-08-15T09:42:06.183Z</updated>
  <id>http://xiexiao.com/</id>
  <author>
    <name><![CDATA[谢小漫]]></name>
    <email><![CDATA[ilikethiscat@gmail.com]]></email>
  </author>
  <generator uri="http://zespia.tw/hexo">Hexo</generator>
  <entry>
    <title type="html"><![CDATA[OSC源创会-珠海]]></title>
    <link href="http://xiexiao.com/2014/08/15/OSC-2014/"/>
    <id>http://xiexiao.com/2014/08/15/OSC-2014/</id>
    <published>2014-08-15T09:30:30.000Z</published>
    <updated>2014-08-15T09:41:56.179Z</updated>
    <content type="html"><![CDATA[<p>上周末的源创会总结。</p>
<h3>免责声明</h3>
<p>以下仅为个人观点，如有误会请谅解。</p>
<h2>goparsec库</h2>
<p>刘老师总是玩高大上的东西。这次的这个小库虽小，但是应该实用。<br>介绍的时候一直是吐槽<code>Go没有泛型</code>，3+次吐槽。<br>才写了5k+ Go代码的，也深深的觉得没有泛型太难受了。<br>goparsec能干什么：写语法解析。可以写Markdown的内容解析，也可以写SQL解析器。</p>
<h2>SequoiaDB数据库</h2>
<p>这是广告，这是广告，这是广告。</p>
<h2>Docker</h2>
<p>CentOS下玩过Docker，太简单上手了。<br>再来听这个主题，受益很多：Docker里边的ssh还不能放到外边来访问，Docker这货还有安全问题。<br>Docker不错，估计以后可以拿来整开发的环境。<br>还有<a href="https://github.com/dockercn/docker-hub" target="_blank">Docker hub</a>这个可以推荐。<br>觉得这个主题是底层的也有讲到一些，很有收益。</p>
<h2>OpenStack社区</h2>
<p>小眼那个迷离。主题不错，介绍了OpenStack社区，怎么为OpenStack提交代码。<br>那个代码提交多审核的机制很妙：多个自动编译通过，代码review通过，才能提交到主干中。<br>浏览过OpenStack的Github，这货是有很多个模块的东西，感觉太难下嘴啃了。</p>
<h2>企业视角看见不一样的开源</h2>
<p>华为参加开源项目的方法和遇到的坑。</p>
<p>END.</p>
]]></content>
    <category scheme="http://xiexiao.com/tags/Go/" term="Go"/>
    <category scheme="http://xiexiao.com/tags/Docker/" term="Docker"/>
    <category scheme="http://xiexiao.com/tags/OpenStack/" term="OpenStack"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[编译Hadoop 2.4.1完整步骤]]></title>
    <link href="http://xiexiao.com/2014/08/08/build-Hadoop/"/>
    <id>http://xiexiao.com/2014/08/08/build-Hadoop/</id>
    <published>2014-08-08T02:46:17.000Z</published>
    <updated>2014-08-08T02:48:19.166Z</updated>
    <content type="html"><![CDATA[<h3>编译Hadoop 2.4.1完整步骤</h3>
<p>因为下载的bin包中的lib是32位的，64位的CentOS调用不上，只能自己动手编译一下了。<br>编译挺简单，下载依赖包比较花时间。<br>以下环境都是在CentOS 6.5 Mini。</p>
<h3>安装jdk</h3>
<p>下载 server-jre-7u67-linux-x64.gz</p>
<figure class="highlight lang-bash"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>tar zxf server-jre-7u67-linux-x64.gz -C /opt/
ln -s jdk1.7.0_67 jdk
</pre></td></tr></table></figure>

<p>配置<code>vi /etc/profile</code><br>最后添加</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="title">export</span> JAVA_HOME=/opt/jdk
export PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin
</pre></td></tr></table></figure>

<h3>安装Maven</h3>
<figure class="highlight lang-bash"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>wget http://apache.fayea.com/apache-mirror/maven/maven-3/3.2.2/binaries/apache-maven-3.2.2-bin.tar.gz
tar zxf apache-maven-3.2.2-bin.tar.gz -C /opt/
</pre></td></tr></table></figure>

<p>配置<code>vi /etc/profile</code><br>最后添加</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="title">export</span> MAVEN_HOME=/opt/apache-maven-<span class="number">3</span>.<span class="number">2</span>.<span class="number">2</span>
export PATH=<span class="variable">$PATH</span>:<span class="variable">$MAVEN_HOME</span>/bin
</pre></td></tr></table></figure>

<h3>安装ant</h3>
<figure class="highlight lang-bash"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>wget http://mirror.bit.edu.cn/apache/ant/binaries/apache-ant-1.9.4-bin.tar.gz
tar zxf apache-ant-1.9.4-bin.tar.gz -C /opt/
</pre></td></tr></table></figure>

<p>配置<code>vi /etc/profile</code><br>最后添加</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="title">export</span> ANT_HOME=/opt/apache-ant-<span class="number">1</span>.<span class="number">9</span>.<span class="number">4</span>
export PATH=<span class="variable">$PATH</span>:<span class="variable">$ANT_HOME</span>/bin
</pre></td></tr></table></figure>

<h3>安装项目的系统依赖</h3>
<figure class="highlight lang-bash"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>yum install gcc
yum install gcc-c++
yum install autoconf automake libtool cmake
yum install zlib-devel openssl-devel
</pre></td></tr></table></figure>

<h3>安装protobuf</h3>
<p>下载，解压</p>
<figure class="highlight lang-bash"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>wget https://protobuf.googlecode.com/files/protobuf-2.5.0.tar.gz
tar zxf protobuf-2.5.0.tar.gz
cd protobuf-2.5.0
./configure
make
make install
</pre></td></tr></table></figure>

<h3>下载源代码，解压</h3>
<figure class="highlight lang-bash"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>wget http://mirror.bit.edu.cn/apache/hadoop/common/hadoop-2.4.1/hadoop-2.4.1-src.tar.gz
tar zxf hadoop-2.4.1-src.tar.gz
</pre></td></tr></table></figure>

<h3>编译Hadoop</h3>
<p>不编译doc，跳过单元测试</p>
<figure class="highlight lang-bash"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>cd hadoop-2.4.1-src
mvn package -Dmaven.javadoc.skip=<span class="literal">true</span> -Pdist,native -DskipTests -Dtar
</pre></td></tr></table></figure>

<h3>查看编译的64位lib</h3>
<figure class="highlight lang-bash"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>cd hadoop-dist/target/hadoop-2.4.1/lib/native
objdump -f libhadoop.so
</pre></td></tr></table></figure>

<p>结果显示是i386:x86-64，这就是64位的lib了。</p>
<p>END.</p>
]]></content>
    <category scheme="http://xiexiao.com/tags/Hadoop/" term="Hadoop"/>
    <category scheme="http://xiexiao.com/tags/CentOS/" term="CentOS"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[yum安装软件出错]]></title>
    <link href="http://xiexiao.com/2014/08/07/yum-get-error/"/>
    <id>http://xiexiao.com/2014/08/07/yum-get-error/</id>
    <published>2014-08-07T04:37:17.000Z</published>
    <updated>2014-08-08T02:54:29.403Z</updated>
    <content type="html"><![CDATA[<h3>问题</h3>
<p>yum安装软件<code>yum install wget</code>，报错:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="label">http:</span>//mirrors<span class="preprocessor">.aliyun</span><span class="preprocessor">.com</span>/centos/<span class="number">6.5</span>/updates/x86_64/Packages/coreutils-<span class="number">8.4</span>-<span class="number">31.</span>el6_5<span class="number">.1</span><span class="preprocessor">.x</span>86_64<span class="preprocessor">.rpm</span>: [Errno <span class="number">14</span>] PYCURL ERROR <span class="number">56</span> - <span class="string">"Failure when receiving data from the peer"</span>
</pre></td></tr></table></figure>

<h3>解决办法</h3>
<figure class="highlight lang-bash"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>yum clean all
yum makecache
</pre></td></tr></table></figure>

<p>重新执行安装命令，就可以。</p>
<p>END.</p>
]]></content>
    <category scheme="http://xiexiao.com/tags/yum/" term="yum"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Scala安装指南]]></title>
    <link href="http://xiexiao.com/2014/07/29/scala-setup/"/>
    <id>http://xiexiao.com/2014/07/29/scala-setup/</id>
    <published>2014-07-29T07:56:30.000Z</published>
    <updated>2014-07-30T06:02:42.177Z</updated>
    <content type="html"><![CDATA[<h1>Scala安装指南</h1>
<h2>确认Java已经安装</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">java</span> -version
</pre></td></tr></table></figure>

<h2>下载最新版本的Scala</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="label">http:</span>//www<span class="preprocessor">.scala</span>-lang<span class="preprocessor">.org</span>/downloads
</pre></td></tr></table></figure>

<p>安装</p>
<h2>设置环境变量</h2>
<table>
<thead>
<tr>
<th>Environment</th>
<th>Variable</th>
<th>Value (example)</th>
</tr>
</thead>
<tbody>
<tr>
<td>Unix</td>
<td>$SCALA_HOME</td>
<td>/usr/local/share/scala</td>
</tr>
<tr>
<td></td>
<td>$PATH</td>
<td>$PATH:$SCALA_HOME/bin</td>
</tr>
<tr>
<td>Windows</td>
<td>%SCALA_HOME%</td>
<td>c:\Progra~1\Scala</td>
</tr>
<tr>
<td></td>
<td>%PATH%</td>
<td>%PATH%;%SCALA_HOME%\bin</td>
</tr>
</tbody>
</table>
<h2>测试是否正常</h2>
<p>查看当前scala的版本</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">scala</span> -version
</pre></td></tr></table></figure>

<p>进入交互shell</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="attribute">scala
</pre></td></tr></table></figure>

<h2>Hello, world!</h2>
<p>测试例子使用代码</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>object <span class="constant">HelloWorld</span> {
  <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(<span class="symbol">args:</span> <span class="constant">Array</span>[<span class="constant">String</span>])</span> </span>{
    println(<span class="string">"Hello, world!"</span>)
  }
}
</pre></td></tr></table></figure>

<p>交互方式输入</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre>&gt; scala
<span class="constant">This</span> is a <span class="constant">Scala</span> shell.
<span class="constant">Type</span> <span class="keyword">in</span> expressions to have them evaluated.
<span class="constant">Type</span> <span class="symbol">:help</span> <span class="keyword">for</span> more information.
scala&gt; object <span class="constant">HelloWorld</span> {
    |   <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(<span class="symbol">args:</span> <span class="constant">Array</span>[<span class="constant">String</span>])</span> </span>{
    |     println(<span class="string">"Hello, world!"</span>)
    |   }
    | }
<span class="keyword">defined</span> <span class="class"><span class="keyword">module</span> <span class="title">HelloWorld</span></span>
scala&gt; <span class="constant">HelloWorld</span>.main(null)
<span class="constant">Hello</span>, world!
scala&gt;<span class="symbol">:q</span>
&gt;
</pre></td></tr></table></figure>

<p>编译方式，编译</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="blockquote">&gt; scalac HelloWorld.scala</span>
</pre></td></tr></table></figure>

<p>然后运行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="blockquote">&gt; scala HelloWorld</span>
</pre></td></tr></table></figure>

<p>END.</p>
]]></content>
    <category scheme="http://xiexiao.com/tags/Scala/" term="Scala"/>
    <category scheme="http://xiexiao.com/tags/Java/" term="Java"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Docker基础指南]]></title>
    <link href="http://xiexiao.com/2014/07/17/docker_intro/"/>
    <id>http://xiexiao.com/2014/07/17/docker_intro/</id>
    <published>2014-07-17T10:13:30.000Z</published>
    <updated>2014-07-17T10:20:12.784Z</updated>
    <content type="html"><![CDATA[<h1>Docker介绍</h1>
<p>Docker作为一个容器运行，运行一个unix进程与服务器隔离提供里强大的安全保障，你的软件可以重复地运行在任何地方，因为它的容器包含了所有的环境依赖关系！</p>
<p>Docker.io 是轻量级的“容器引擎+映像仓库”，在LXC（linux轻量级容器）的基础上构建，可以运行任何应用程序。<br>docker.io的核心层由以下几个部分组成:</p>
<ul>
<li>可执行程序，“/usr/bin/docker”</li>
<li>docker.io网站上有一系列创建好的操作系统和应用程序映像</li>
<li>AUFS（另一个统一文件系统）来实现文件系统的快照，文件变化，控制只读或读写的需求。</li>
<li>LXC（Linux轻量级容器）</li>
<li>Cgroups（各种资源和命名空间的管理）</li>
</ul>
<h1>安装</h1>
<p>以下以Linux版本：<code>CentOS release 6.5 (Final)</code>，管理员用户运行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">cat</span> /etc/centos-release
</pre></td></tr></table></figure>

<p>安装docker-io</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="comment">yum</span> <span class="literal">-</span><span class="comment">y</span> <span class="comment">install</span> <span class="comment">docker</span>-<span class="comment">io</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">enablerepo=epel
</pre></td></tr></table></figure>

<p>安装成功后，运行命令得到相关的介绍</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="title">docker</span>
<span class="title">docker</span> -v
</pre></td></tr></table></figure>

<p>安装的版本是：<code>Docker version 1.0.0, build 63fe64c/1.0.0</code></p>
<p>配置服务运行和自动启动</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>service docker <span class="operator"><span class="keyword">start</span>
chkconfig docker <span class="keyword">on</span>
</pre></td></tr></table></figure>

<p>需要拉取images，拉取基本的CentOS的images</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">docker</span> pull centos
</pre></td></tr></table></figure>

<p>拉取完成后，运行命令查看images</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">docker</span> images
</pre></td></tr></table></figure>

<p>得到列表显示</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="type">REPOSITORY</span>          <span class="type">TAG</span>                 <span class="type">IMAGE</span> <span class="type">ID</span>            <span class="type">CREATED</span>             <span class="type">VIRTUAL</span> <span class="type">SIZE</span>
<span class="title">centos</span>              centos7             <span class="number">1</span>a7dc42f78ba        <span class="number">7</span> days ago          <span class="number">236.4</span> <span class="type">MB</span>
<span class="title">centos</span>              latest              <span class="number">1</span>a7dc42f78ba        <span class="number">7</span> days ago          <span class="number">236.4</span> <span class="type">MB</span>
<span class="title">centos</span>              centos6             cd934e0010d5        <span class="number">8</span> days ago          <span class="number">206.9</span> <span class="type">MB</span>
</pre></td></tr></table></figure>

<p>基础命令列表，显示image的版本，运行image中的top命令，搜索images</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="title">docker</span> run centos:centos7 cat /etc/centos-release
<span class="title">docker</span> run centos:centos7 /usr/bin/top
<span class="title">docker</span> search centos
</pre></td></tr></table></figure>

<p>进入image中的命令模式，使用<code>exit</code>命令退出</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="comment">docker</span> <span class="comment">run</span> <span class="literal">-</span><span class="comment">i</span> <span class="literal">-</span><span class="comment">t</span> <span class="comment">centos:centos7</span> <span class="comment">/bin/bash
</pre></td></tr></table></figure>

<h1>开启工作进程</h1>
<p>开启一个长时间工作进程</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="comment">JOB=$(docker</span> <span class="comment">run</span> <span class="literal">-</span><span class="comment">d</span> <span class="comment">centos:centos7</span> <span class="comment">/bin/sh</span> <span class="literal">-</span><span class="comment">c</span> <span class="comment">"while</span> <span class="comment">true;</span> <span class="comment">do</span> <span class="comment">echo</span> <span class="comment">Hello</span> <span class="comment">world;</span> <span class="comment">sleep</span> <span class="comment">1;</span> <span class="comment">done")
</pre></td></tr></table></figure>

<p>查看这个工作进程的日志</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">docker</span> logs <span class="variable">$JOB</span>
</pre></td></tr></table></figure>

<p>杀死进程，也可以先用后一条命名查看容器id，通过4位+的容器id来kill。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">docker</span> kill <span class="variable">$JOB</span>
</pre></td></tr></table></figure>

<p>查看所有运行中的容器</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">docker</span> ps
</pre></td></tr></table></figure>

<h1>制作自己的image</h1>
<p>这里以制作带nc命令的centos7举例，后边这个images有用，进入某个版本的image的控制台</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="comment">docker</span> <span class="comment">run</span> <span class="literal">-</span><span class="comment">i</span> <span class="literal">-</span><span class="comment">t</span> <span class="comment">centos:centos7</span> <span class="comment">/bin/bash
</pre></td></tr></table></figure>

<p>在image中安装nc，并确认安装成功</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">yum</span> -y install nc
</pre></td></tr></table></figure>

<p>之后退出这个控制台，查找这个image的Container ID:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">docker</span> ps -a
</pre></td></tr></table></figure>

<p>制作image并命名为centos7_nc，其中dbb52为上一个命令中得到的ID前四位</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>docker <span class="operator"><span class="keyword">commit</span> dbb52 centos7_nc
</pre></td></tr></table></figure>

<p><code>docker images</code>可以确认image已经成功，然后确认这个image中有nc命令</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">docker</span> run centos7_nc /bin/nc
</pre></td></tr></table></figure>

<h1>为服务绑定一个TCP端口</h1>
<p>为容器绑定4444端口，并告诉网络监听4444</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="comment">JOB=$(docker</span> <span class="comment">run</span> <span class="literal">-</span><span class="comment">d</span> <span class="literal">-</span><span class="comment">p</span> <span class="comment">4444</span> <span class="comment">centos7_nc</span> <span class="comment">/bin/nc</span> <span class="literal">-</span><span class="comment">l</span> <span class="comment">4444)
</pre></td></tr></table></figure>

<p>查看容器用的公共端口，这个是对外的端口</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="constant">PORT</span>=<span class="variable">$(</span>docker port <span class="variable">$JOB</span> <span class="number">4444</span> | awk -<span class="constant">F</span><span class="symbol">:</span> <span class="string">'{ print $2 }'</span>)
</pre></td></tr></table></figure>

<p>连接公共端口</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">echo</span> hello world | nc <span class="number">127.0.0.1</span> <span class="variable">$PORT</span>
</pre></td></tr></table></figure>

<p>确认网络连接是否工作，程序运行ok</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">docker</span> logs <span class="variable">$JOB</span>
</pre></td></tr></table></figure>

<p>END.</p>
]]></content>
    <category scheme="http://xiexiao.com/tags/Docker/" term="Docker"/>
    <category scheme="http://xiexiao.com/tags/CentOS/" term="CentOS"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[开始学习Go]]></title>
    <link href="http://xiexiao.com/2014/01/20/golang-start/"/>
    <id>http://xiexiao.com/2014/01/20/golang-start/</id>
    <published>2014-01-20T07:12:17.000Z</published>
    <updated>2014-01-20T09:18:03.678Z</updated>
    <content type="html"><![CDATA[<p>上星期开始，了解了一下Go，正如介绍</p>
<blockquote>
<p>Go is an open source programming language that makes it easy to build simple, reliable, and efficient software.</p>
</blockquote>
<p>Go确实是牛，除了开发者牛，后台牛。</p>
<p>我觉得最重要的一点是：这是开发语言使用者在开发了几十年后，重新思考了开发语言。</p>
<p>比如这不是基于VM的语言，Java，C#，Python，Ruby这些都是基于VM的，而Go不是，确提供了许多的语法糖。</p>
<p>同时还提供了goroutines，并行的goroutines。</p>
<p>还有很好用的go get, go test等代码管理调试命令。</p>
<p>先进的包管理使入门变得更轻松了。</p>
<p>推荐学习一下Go，本人2014年的目标之一就是学习和使用Go。</p>
]]></content>
    <category scheme="http://xiexiao.com/tags/Go/" term="Go"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[小说工匠]]></title>
    <link href="http://xiexiao.com/2013/12/28/craftsman-2013/"/>
    <id>http://xiexiao.com/2013/12/28/craftsman-2013/</id>
    <published>2013-12-28T06:33:20.000Z</published>
    <updated>2013-12-28T06:32:57.101Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>是不是一个优秀的小说家我不敢讲，但我要强调我一定是个非常优秀的小说工匠。工匠不对自己的作品形成美学，这就是没有天良了。——张大春  </p>
</blockquote>
<p>《小说稗类》是本不错的书。偶尔的几个晚上翻过几页，慢慢的品着里边的文字。虽然书里的部分字词，很陌生和比较难理解。</p>
<p>这段时间不断抽空看小说和一些杂书，都是几本同时开动。《大秦帝国》看了三分之二，《代码的未来》临睡前翻十几页，《小说稗类》也抽空翻几页。</p>
<p>有时看着看着，就慢慢的联想着编程那点事，比如上边引用的文字在《小说稗类》腰封上。<br>写代码其实也是同样的道理，要从代码工人上升到工匠，就必须不断的学习和观察钻研，对自己的作品形成美学，不能只是停留在一个点上。<br>要做把自己定位在是一个工匠上，才能把代码写好，产品做好。</p>
<p>摩尔定律：预计每18个月，芯片的性能会提高一倍。也就需要不断的进行程序代码的改进改良。</p>
]]></content>
    <category scheme="http://xiexiao.com/tags/小说稗类/" term="小说稗类"/>
    <category scheme="http://xiexiao.com/tags/小说工匠/" term="小说工匠"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[2013最后一场夜球]]></title>
    <link href="http://xiexiao.com/2013/12/27/football-end-2013/"/>
    <id>http://xiexiao.com/2013/12/27/football-end-2013/</id>
    <published>2013-12-27T15:33:17.000Z</published>
    <updated>2013-12-27T15:40:38.980Z</updated>
    <content type="html"><![CDATA[<p>断断续续的，在附近小区的篮球场踢了几年的足球。<br>这个月休战了很多场，每周两场。<br>今晚还好，不是很冷。</p>
<p>想写一个叫《当我谈路测分析时，我谈什么》的小文，先订在这儿，慢慢打打草稿。<br>估计得有几篇小文才能把这个事情说好。<br>虽说在做电信路测系统的公司呆了几年，感觉是越做越是做不好。<br>心里有很多的念头，估计还是得写写，总结一下才行。<br>大体能说的不是具体的如何做路测，而是路测得到的数据，分析的时候要考虑什么基础的知识。<br>不会涉及专业的电信网络知识：比如层三信令怎么破，这些个专业的知识我也不太懂。<br>在我看来，路测数据就是一堆时间纬度和空间纬度上的点的度量集合。</p>
<p>好吧，慢慢在本子上打草稿，农历新年前后鼓捣鼓捣。</p>
]]></content>
    <category scheme="http://xiexiao.com/tags/足球/" term="足球"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[开始ol3需要注意的]]></title>
    <link href="http://xiexiao.com/2013/12/26/ol3js-when-start/"/>
    <id>http://xiexiao.com/2013/12/26/ol3js-when-start/</id>
    <published>2013-12-26T05:13:17.000Z</published>
    <updated>2013-12-26T04:10:23.355Z</updated>
    <content type="html"><![CDATA[<p>Openlayers 3简称<a href="http://ol3js.org" target="_blank">ol3</a>确实是不错，架构方面好像好了很多，调整了projection的转换。<br>基于Google的<a href="http://code.google.com/p/closure-library/" target="_blank">Closure Library</a>，贡献代码的入门难度加大了。<br>代码的质量和输出代码的体积方面好像确实小了很多。</p>
<p>截至到本文之前，API Docs奇差，网上浏览就有找不到北的感觉。<br>还有没有支持IE7/IE8。<br>弄了一些基本功能之后，才发现没有支持IE7，看来还要花点时间切回Openlayers2了。<br>估计还是可以在移动设备上尝试一下ol3的。</p>
]]></content>
    <category scheme="http://xiexiao.com/tags/ol3/" term="ol3"/>
    <category scheme="http://xiexiao.com/tags/GIS/" term="GIS"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[最小化安装CentOS]]></title>
    <link href="http://xiexiao.com/2013/12/25/minimal-centos/"/>
    <id>http://xiexiao.com/2013/12/25/minimal-centos/</id>
    <published>2013-12-25T01:37:17.000Z</published>
    <updated>2014-08-08T02:46:43.655Z</updated>
    <content type="html"><![CDATA[<h3>1. 下载安装文件</h3>
<p>download CentOS-6.5-x86_64-minimal.iso file from <a href="http://mirrors.163.com/centos" target="_blank">mirrors.163.com/centos</a></p>
<h3>2. 安装</h3>
<p>安装过程略过。完成后网络没有启动。</p>
<h3>3. 启动网络</h3>
<p>查看网络配置：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">cat</span> -n /etc/sysconfig/network-scripts/ifcfg-eth0
</pre></td></tr></table></figure>

<p>修改网络配置：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">vi</span> /etc/sysconfig/network-scripts/ifcfg-eth0
</pre></td></tr></table></figure>

<p>配置内容如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="setting">DEVICE=<span class="value"><span class="string">"eth0"</span></span></span>
<span class="setting">HWADDR=<span class="value"><span class="string">"00:0C:29:6A:B0:95"</span></span></span>
<span class="setting">BOOTPROTO=<span class="value">dhcp</span></span>
<span class="setting">MM_CONTROLLED=<span class="value"><span class="string">"yes"</span></span></span>
<span class="setting">ONBOOT=<span class="value"><span class="string">"yes"</span></span></span>
</pre></td></tr></table></figure>

<p>重新启动网络：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>service network re<span class="operator"><span class="keyword">start</span>
</pre></td></tr></table></figure>

<h3>4. 更新系统</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>yum -y <span class="operator"><span class="keyword">update</span>
</pre></td></tr></table></figure>

<h3>5. 关闭IPV6</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">vi</span> /etc/modprobe.conf
</pre></td></tr></table></figure>

<p>添加以下内容</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="title">alias</span> net-pf-<span class="number">10</span> <span class="built_in">off</span>
alias ipv6 <span class="built_in">off</span>
</pre></td></tr></table></figure>

<p>保存退出，并重启系统。</p>
<h3>6. 查看iptables状态</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">service</span> iptables status
</pre></td></tr></table></figure>

<p>设置iptables开机自动启动：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="title">chkconfig</span> iptables <span class="built_in">on</span> <span class="comment">#开启</span>
chkconfig iptables <span class="built_in">off</span> <span class="comment">#关闭</span>
</pre></td></tr></table></figure>

<p>iptables开启关闭服务</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="title">service</span> iptables start <span class="comment">#开启</span>
service iptables stop <span class="comment">#关闭</span>
</pre></td></tr></table></figure>

<h3>7. 查看系统时间和时区</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="keyword">date</span> -R <span class="preprocessor">#查看时间</span>
<span class="keyword">date</span> -s <span class="number">11</span>:<span class="number">15</span>:<span class="number">26</span> <span class="preprocessor">#修改时间</span>
</pre></td></tr></table></figure>

]]></content>
    <category scheme="http://xiexiao.com/tags/CentOS/" term="CentOS"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[挖坑记]]></title>
    <link href="http://xiexiao.com/2013/12/24/dig-a-blog/"/>
    <id>http://xiexiao.com/2013/12/24/dig-a-blog/</id>
    <published>2013-12-24T11:42:17.000Z</published>
    <updated>2013-12-24T12:02:42.637Z</updated>
    <content type="html"><![CDATA[<p>本blog使用<a href="https://github.com/tommy351/hexo/" target="_blank">Hexo</a>.<br>相关的建立方法请自行google一下。</p>
<p>Hexo是个不错的程序，正如其自身的介绍:</p>
<blockquote>
<p>A fast, simple &amp; powerful blog framework, powered by Node.js.</p>
</blockquote>
<p>安装Hexo的过程，也是对Node.js的了解，Node.js确实足够的简单，一个.exe文件。<br>还有包管理npm，官网上的<a href="http://nodejs.org/dist/" target="_blank">release files</a>就提供了node.exe的下载和npm包管理的文件包。</p>
<p>建立文件夹，然后解压node.exe，解压npm-1.3.9.zip到主目录下。<br>目录结构: D:\nodejs\</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="title">node</span>.exe
<span class="title">npm</span>.cmd
<span class="title">node_modules</span>\
</pre></td></tr></table></figure>

<p>设置一下npm的一下配置目录：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>npm config set prefix "D:<span class="command">\nodejs</span><span class="command">\npm</span>-global"
npm config set cache "D:<span class="command">\nodejs</span><span class="command">\npm</span>-cache"
</pre></td></tr></table></figure>

<p>设置一下Path的环境变量，增加一下D:\nodejs\node-global;D:\nodejs\;就可以了。</p>
<p>设置完成后，Hexo的安装就非常简单了:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">npm</span> install -g hexo
</pre></td></tr></table></figure>

<p>然后就是新的一个cmd窗口，建立目录blog1，主要命令是:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="title">hexo</span> init <span class="comment">#建立网站</span>
hexo generate <span class="comment">#生成内容</span>
hexo server <span class="comment">#预览网站, 打开http://localhost:4000</span>
</pre></td></tr></table></figure>

<p>配置文件在_config.yml，相关配置请自行google。<br>需要配置github的地址等信息。<br>发布命令是:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">hexo</span> deploy
</pre></td></tr></table></figure>

<p>然后输入github帐号和密码, 我的windows下不会提示输入，摸瞎输入后，成功部署。<br>CNAME的域名绑定的话，就是在deploy之前，创建一个CNAME文件，写入域名，放到public目录下。<br>到域名DNS设置里边设置一个CNAME指向你的x.github.io。</p>
<p>然后就是要熟悉一下Markdown的语法了。</p>
<p>挖坑记录完毕。</p>
]]></content>
    <category scheme="http://xiexiao.com/tags/hexo/" term="hexo"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://xiexiao.com/2013/12/24/hello-world/"/>
    <id>http://xiexiao.com/2013/12/24/hello-world/</id>
    <published>2013-12-24T06:42:17.000Z</published>
    <updated>2013-12-24T11:23:04.543Z</updated>
    <content type="html"><![CDATA[<p>Hello world!</p>
<p>你好，世界。</p>
<p>公元2013年12月24日，重新挖一个坑。</p>
<p>慢慢把旧坑里边的日志迁移过来吧。</p>
<p>世界的一切都安好，一如过去的岁月流淌在今日平淡生活中。</p>
]]></content>
  </entry>
</feed>
